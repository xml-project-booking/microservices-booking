
syntax = "proto3";
option go_package = "github.com/tamararankovic/microservices_demo/common/accommodations";

package accommodations;


import "google/api/annotations.proto";

service AccommodationService{
  rpc Get(GetRequest) returns(GetResponse) {
    option (google.api.http) = {
      get: "/accommodations/accommodation/{id}"
    };
  }
  rpc GetAll(GetAllRequest) returns(GetAllResponse) {
    option (google.api.http) = {
      get: "/accommodations/accommodation"
    };
  }
  rpc ChangeAccommodationReservationType (ChangeReservationTypeRequest) returns (ChangeReservationTypeResponse){
    option (google.api.http) = {
      post: "/accommodations/update-reservation-type"
      body:"*"
    };
  }
  rpc CreateAccommodation (CreateAccommodationRequest) returns (CreateAccommodationResponse){
    option (google.api.http) = {
      post: "/accommodations/create-accommodation"
      body:"*"
    };
  }

  rpc GetAllIdsByHost(GetAllIdsByHostRequest) returns(GetAllIdsByHostResponse) {
    option (google.api.http) = {
      get: "/accommodations/accommodationIds/{id}"
    };
  }
  rpc DeleteAllByHost(DeleteAllByHostRequest) returns (DeleteAllByHostResponse) {
    option (google.api.http) = {
      delete: "/accommodations/delete-host/{id}"
    };
  }
  rpc GetAccommodation(GetRequest) returns (GetAccommodationResponse){
    option (google.api.http) = {
      get: "/accommodations/get-accommodation/{id}"


    };
  }

}
message ChangeReservationTypeRequest{
  string id = 1;
  string ConfirmationReservationType = 2;
}

message ChangeReservationTypeResponse{
  string id = 1;
  string err= 2;
}
message GetAccommodationResponse{
  string id =1;
  string ReservationConfirmationType  =2;
  string minGuest = 3;
  string maxGuest = 4;
}
message CreateAccommodationRequest {
  string name = 1;
  string reservationConfirmation = 2;
  string city = 3;
  string country = 4;
  string street = 5;
  string streetNumber = 6;
  string minGuest = 7;
  string maxGuest = 8;
  string hostId = 9;
  bool wifi = 10;
  bool kitchen = 11;
  bool airConditioning = 12;
  bool freeParking = 13;
}
message CreateAccommodationResponse {
  string id = 1;
}


message GetRequest {
  string id = 1;
}

message GetResponse {
  Accommodation accommodation = 1;
}

message GetAllRequest {
}

message GetAllResponse {
  repeated Accommodation accommodations = 1;
}

message Accommodation {
  string id = 1;
  string AccommodationReservationType=2;
  string name = 3;
  string hostId = 4;
}
message GetAllIdsByHostRequest {
  string id = 1;
}

message GetAllIdsByHostResponse {
  repeated string ids = 1;
}
message DeleteAllByHostRequest {
  string id = 1;
}

message DeleteAllByHostResponse {
  RequestResult requestResult = 1;
}
message RequestResult {
  int32 code = 1;
  string message = 2;

  int64 MaxGuest  =3;
  int64 MinGuest = 4;

}
